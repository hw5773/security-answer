import argparse
import logging
import time

def check_generator(p, g):
    ret = False

    # TODO: implement this function

    return True

def evaluate_g_x(p, g, x):
    y = -1
    start = time.time()

    # TODO: implement this function

    end = time.time()
    et = end - start
    return y, et

def find_discrete_log(p, y, g):
    x = -1
    start = time.time()

    # TODO: implement this function

    end = time.time()
    et = end - start
    return x, et

def command_line_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("-g", metavar="<generator>", help="Generator", type=int, required=True)
    parser.add_argument("-x", metavar="<number x>", help="Number x", type=int, required=True)
    parser.add_argument("-y", metavar="<number y>", help="Number y", type=int, required=True)
    parser.add_argument("-l", "--log", metavar="<log level (DEBUG/INFO/WARNING/ERROR/CRITICAL)>", help="Log level (DEBUG/INFO/WARNING/ERROR/CRITICAL)", type=str, default="INFO")
    args = parser.parse_args()
    return args

def main():
    args = command_line_args()
    log_level = args.log
    logging.basicConfig(level=log_level)

    #p = 2147483647
    p = 131071
    g = args.g
    x = args.x
    y = args.y

    logging.info("The prime number {} is automatically selected".format(p))
    logging.info("You entered {} for the generator".format(g))

    if check_generator(p, g):
        logging.info("The number {} is a valid generator in the group generated by the prime number {}".format(g, p))
        y, et = evaluate_g_x(p, g, x)
        logging.info("y = {} from p = {}, g = {}, and x = {}".format(y, p, g, x))
        logging.info("The elapsed time required to find y given g and x is {}".format(et))

        x, et = find_discrete_log(p, y, g)
        logging.info("x = {} from p = {}, y = {}, and g = {}".format(x, p, y, g))
        logging.info("The elapsed time required to find x given y and g is {}".format(et))
    else:
        logging.error("The number {} is not a valid generator in the group generated by the prime number {}".format(g, p))
    
if __name__ == "__main__":
    main()
